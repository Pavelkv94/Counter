{"version":3,"sources":["components/common/Button.tsx","components/Counter/Counter.tsx","components/HeadTitle/HeadTitle.tsx","components/common/SpanSetting.tsx","components/Setting/Setting.tsx","redux/counterReducer.ts","App.tsx","redux/store.ts","reportWebVitals.ts","index.tsx"],"names":["Button","props","disabled","className","class","onClick","to","title","style","width","height","Counter","reset","disabledOne","state","counter","displayValue","maxValue","disabledTwo","startValue","addInc","HeadTitle","id","baseFrequency","numOctaves","seed","attributeName","dur","values","repeatCount","in","scale","SpanSetting","type","value","onChange","e","changeValue","currentTarget","max","min","Setting","changeValueMax","changeValueStart","setValue","disabledBtn","position","zIndex","initialState","isDisabled","App","preloadedState","useSelector","dispatch","useDispatch","console","log","render","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","persistedTodoString","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddb3b2b3.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\r\n\r\ntype ButtonType = {\r\n    title: string\r\n    disabled: boolean\r\n    onClick: () => void\r\n    class: string\r\n}\r\n//общая компонента кнопки\r\nexport function Button(props: ButtonType) {\r\n    //делаем так чтобы при дизейбленной кнопке Навлинк не работал\r\n    return (<>{\r\n        props.disabled === true\r\n            ? <button\r\n                className={props.class}\r\n                onClick={props.onClick}\r\n                disabled={props.disabled}\r\n            > <NavLink to={props.title === \"Counter\" ? \"/setting\" : \"/Counter\"}>\r\n                    <div style={{ width: '25 %', height: '50px' }}>{props.title}</div>\r\n                </NavLink>\r\n\r\n            </button>\r\n            : <button\r\n                className={props.class}\r\n                onClick={props.onClick}\r\n                disabled={props.disabled}\r\n            > <NavLink to={props.title === \"set\" ? \"/setting\" : \"/Counter\"}>\r\n                    <div style={{ width: '25 %', height: '50px' }}>{props.title}</div>\r\n                </NavLink>\r\n\r\n            </button>\r\n\r\n    }</>)\r\n}","import '../../App.css';\r\nimport { Button } from '../common/Button';\r\nimport { AppStateType } from '../../redux/store';\r\n\r\ntype CounerType = {\r\n    state: AppStateType\r\n    addInc: () => void\r\n    reset: () => void\r\n}\r\n\r\nexport function Counter(props: CounerType) {\r\n    //коллбэки\r\n    let addIncrement = () => props.addInc()\r\n    let reset = () => props.reset()\r\n    //условия дизейблов кнопок\r\n    let disabledOne = props.state.counter.displayValue < props.state.counter.maxValue ? false : true\r\n    let disabledTwo = props.state.counter.displayValue === props.state.counter.startValue ? true : false\r\n\r\n    return (\r\n        <div className=\"countContainer\">\r\n            <div className={`display ${props.state.counter.displayValue === props.state.counter.maxValue ? \"limit\" : \"\"}`}>\r\n                {props.state.counter.displayValue}\r\n            </div>\r\n            <div className=\"controlContainer\">\r\n                <Button\r\n                    title={\"incr\"}\r\n                    disabled={disabledOne}\r\n                    onClick={addIncrement}\r\n                    class={`btn ${props.state.counter.displayValue === props.state.counter.maxValue ? \"disable\" : \"\"}`}\r\n                />\r\n                <Button\r\n                    title={\"reset\"}\r\n                    disabled={disabledTwo}\r\n                    onClick={reset}\r\n                    class={`btn ${props.state.counter.displayValue === props.state.counter.startValue ? \"disable\" : \"\"}`}\r\n                />\r\n                <Button\r\n                    title={\"set\"}\r\n                    disabled={false}\r\n                    onClick={reset}\r\n                    class={'btn'}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './HeadTitle.css';\r\n\r\n//делаем крутой заговловок\r\nexport function HeadTitle() {\r\n  return (<>\r\n    <div className=\"headTitle\"><h2>COUNTER</h2></div>\r\n    <svg>\r\n      <filter id=\"fire\">\r\n        <feTurbulence id=\"turbulance\" baseFrequency=\"0.1 0.1\" numOctaves=\"2\" seed=\"0\">\r\n          <animate attributeName=\"baseFrequency\" dur='8s' values=\"0.1 0.1;0.12 0.12\" repeatCount=\"indefinite\"></animate>\r\n        </feTurbulence>\r\n        <feDisplacementMap in=\"SourceGraphic\" scale=\"8\"></feDisplacementMap>\r\n      </filter>\r\n    </svg>\r\n  </>)\r\n}","import { ChangeEvent } from 'react';\r\nimport '../../App.css';\r\n\r\ntype SpanSettingType = {\r\n    title: string\r\n    value: number\r\n    changeValue: (initValue: number) => void\r\n}\r\n//общий инпут\r\nexport function SpanSetting(props: SpanSettingType) {\r\n    //достаем значение из инпута\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(+e.currentTarget.value)\r\n    }\r\n    return (\r\n        <span className=\"span\">\r\n            <div>{props.title}</div>\r\n            <input type=\"number\" className=\"input\" value={props.value} onChange={onChangeInput} max=\"99\" min=\"-99\" />\r\n        </span>\r\n    )\r\n}","import '../../App.css';\r\nimport { AppStateType } from '../../redux/store';\r\nimport { Button } from '../common/Button';\r\nimport { SpanSetting } from '../common/SpanSetting';\r\n\r\ntype SettingType = {\r\n    state: AppStateType\r\n    changeValueMax: (initValue: number) => void\r\n    changeValueStart: (initValue: number) => void\r\n    setValue: () => void\r\n}\r\n//панель настроек\r\nexport const Setting: React.FC<SettingType> = ({ state, changeValueMax, changeValueStart, setValue }) => {\r\n    //условия дизейбла кнопки\r\n    let disabledBtn = state.counter.maxValue <= state.counter.startValue ? true : false;\r\n    //коллбэк\r\n    const setDisplayValue = () => setValue();\r\n    return (\r\n        <div className=\"countContainer\" >\r\n            <div className=\"setDisplay\">\r\n                <SpanSetting title={\"Max value:\"} value={state.counter.maxValue} changeValue={changeValueMax} />\r\n                {state.counter.maxValue <= state.counter.startValue ? <div className=\"setError\">Max value can't be more than Start value.</div> : \"\"}\r\n                <SpanSetting title={\"Start value:\"} value={state.counter.startValue} changeValue={changeValueStart} />\r\n            </div>\r\n            <div style={state.counter.maxValue <= state.counter.startValue ? { position: \"relative\", zIndex: -1 } : {}}>\r\n                <div className=\"controlContainer\">\r\n                    <Button title={\"Count\"}\r\n                        disabled={disabledBtn}\r\n                        onClick={setDisplayValue}\r\n                        class={`btn ${state.counter.maxValue <= state.counter.startValue ? \"disable\" : \"\"}`}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","type IncCounterValueType = ReturnType<typeof incCounterValueAC>\r\ntype ResetCounterValueType = ReturnType<typeof resetCounterValueAC>\r\ntype MaxValueType = ReturnType<typeof maxValueAC>\r\ntype StartValueType = ReturnType<typeof startValueAC>\r\ntype SetValueType = ReturnType<typeof setValueAC>\r\n\r\ntype ActionType =\r\n    IncCounterValueType\r\n    | ResetCounterValueType\r\n    | MaxValueType\r\n    | StartValueType\r\n    | SetValueType\r\n\r\nconst initialState = {\r\n    displayValue: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    isDisabled: true,\r\n}\r\ntype InitialStateType = typeof initialState\r\nexport function counterReducer(state: InitialStateType = initialState, action: ActionType): InitialStateType {\r\n    console.log(action)\r\n    switch (action.type) {\r\n        case \"INC-COUNTER-VALUE\":\r\n            return {\r\n                ...state,\r\n                displayValue: state.displayValue + 1\r\n\r\n            }\r\n        case \"RESET-COUNTER-VALUE\":\r\n            return {\r\n                ...state,\r\n                displayValue: state.startValue\r\n\r\n            }\r\n        case \"MAX-COUNTER-VALUE\":\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        case \"START-COUNTER-VALUE\":\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue\r\n            }\r\n        case \"SET-COUNTER-VALUE\":\r\n            return {\r\n                ...state,\r\n                displayValue: state.startValue\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport function incCounterValueAC() {\r\n    return {\r\n        type: \"INC-COUNTER-VALUE\"\r\n    } as const\r\n}\r\n\r\nexport function resetCounterValueAC() {\r\n    return {\r\n        type: \"RESET-COUNTER-VALUE\"\r\n    } as const\r\n}\r\nexport function maxValueAC(maxValue: number) {\r\n    return {\r\n        type: \"MAX-COUNTER-VALUE\",\r\n        maxValue,\r\n    } as const\r\n}\r\nexport function startValueAC(startValue: number) {\r\n    return {\r\n        type: \"START-COUNTER-VALUE\",\r\n        startValue,\r\n    } as const\r\n}\r\nexport function setValueAC() {\r\n    return {\r\n        type: \"SET-COUNTER-VALUE\",\r\n    } as const\r\n}\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport { Counter } from './components/Counter/Counter';\r\nimport { HeadTitle } from './components/HeadTitle/HeadTitle';\r\nimport { Setting } from './components/Setting/Setting';\r\nimport { incCounterValueAC, maxValueAC, resetCounterValueAC, setValueAC, startValueAC } from './redux/counterReducer';\r\nimport { AppStateType } from './redux/store';\r\n\r\n\r\n\r\nfunction App() {\r\n  //ЮзСелектор следит за изменением стейта\r\n  let state = useSelector<AppStateType, AppStateType>(state => state);\r\n  //Достаем диспатч из стора\r\n  let dispatch = useDispatch();\r\n  //функция инкремента\r\n  function addInc() {\r\n    dispatch(incCounterValueAC())\r\n  }\r\n  //функция сброса значения\r\n  function reset() {\r\n    dispatch(resetCounterValueAC())\r\n  }\r\n  //функция изменения максимального значения нстройки\r\n  function changeValueMax(value: number) {\r\n    dispatch(maxValueAC(value))\r\n  }\r\n  //функция изменения стартового значения нстройки\r\n  function changeValueStart(value: number) {\r\n    console.log(value)\r\n    dispatch(startValueAC(value))\r\n  }\r\n  //функция присваивания стартового значения нфтройки отображаемому\r\n  function setValue() {\r\n    dispatch(setValueAC())\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\" >\r\n        <HeadTitle />\r\n        <Route render={() => <Counter state={state} addInc={addInc} reset={reset} />} path=\"/Counter\" />\r\n        <Route render={() => <Setting state={state} changeValueMax={changeValueMax} changeValueStart={changeValueStart} setValue={setValue} />} path=\"/setting\" />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { counterReducer } from \"./counterReducer\";\r\n\r\nconst rootReducer = combineReducers({ counter: counterReducer })\r\n\r\n//достаем из локалстораджа\r\nlet preloadedState;\r\nconst persistedTodoString = localStorage.getItem('state');\r\nif (persistedTodoString) {\r\n    preloadedState = JSON.parse(persistedTodoString)\r\n}\r\n\r\nexport const store = createStore(rootReducer, preloadedState)\r\n//засовываем в локалсторадж\r\nstore.subscribe(() => {\r\n    localStorage.setItem('state', JSON.stringify(store.getState()))\r\n})\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}